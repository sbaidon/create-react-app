import { createAction, handleActions } from 'redux-actions'
import { takeLatest, put, call } from 'redux-saga/effects'
import { createSelector } from 'reselect'
import { fromJS, Map } from 'immutable'
import { normalize, denormalize } from 'normalizr'

import {
  domain,
  ERROR,
  PENDING,
  SUCCESS,
} from 'store/constants'
import {
  someAPIMethod,
} from 'utils/api'
import schema from 'store/schemas/mySchema'

/* Actions */
const {{camelCase name}} = domain.defineAction('{{camelCase name}}')

export const MAIN_ACTION = {{camelCase name}}.defineAction('MAIN_ACTION', [PENDING, SUCCESS, ERROR])

/* Reducer */
const defaultState = Map({})

const reducer = handleActions({
  [MAIN_ACTION.SUCCESS]: (state, action) => state,
}, defaultState)

export default reducer

/* Selectors */
export const get{{properCase name}} = (state) => {
  // eslint-disable-next-line reselect/first-param-name
  const {{camelCase name}}WithEntities = state.reduce((aggr, value, key) => {
    let result = aggr

    if (key === 'entities') {
      result = result.set(key, value)
    }

    if (key === 'resources') {
      result = result.set({{camelCase name}}, value.get({{camelCase name}}))
    }

    return result
  }, Map())

  return {{camelCase name}}WithEntities
}

export const makeGet{{properCase name}} = () => createSelector(
  [get{{properCase name}}],
  (filter, state) => {
    const result = denormalize(state.get({{camelCase name}}), [schema], state.get('entities'))

    return result
  },
)

/* Action Creators */
export const mainAction = createAction(MAIN_ACTION.ACTION)

/* Side Effects */
export function* mainSaga(action) {
  try {
    const response = yield call(someAPIMethod, action.payload.toJS())
    const normalized = yield call(normalize, response, schema)
    yield put({
      type: MAIN_ACTION.SUCCESS,
      payload: fromJS(normalized.result),
      entities: fromJS(normalized.entities),
    })
  } catch (err) {
    yield put({ type: MAIN_ACTION.ERROR, payload: { error: err } })
  }
}

/* eslint-disable */
export const {{camelCase name}}Watchers = [
  takeLatest(MAIN_ACTION.ACTION, mainSaga),
]
/* eslint-enable */
